"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import saml2

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-e0m!t3_@xf*i7&d088cvj0(kkbol52-4j412&$9$g56b3qvcir"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'myapp',
    'djangosaml2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTHENTICATION_BACKENDS = [
    'djangosaml2.backends.Saml2Backend',
]

LOGIN_URL = '/saml2/login/'
LOGOUT_URL = '/saml2/logout/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'username'
SAML_CREATE_UNKNOWN_USER = True

SAML_CONFIG = {
    'xmlsec_binary': '/usr/bin/xmlsec1',  # Path to xmlsec1 binary
    'entityid': 'http://localhost:8000/saml2/metadata/',
    'attribute_map_dir': os.path.join(BASE_DIR, 'attribute-maps'),
    'service': {
        'sp': {
            'name': 'Django SAML2 SP',
            'endpoints': {
                'assertion_consumer_service': [
                    ('http://localhost:8000/saml2/acs/', saml2.BINDING_HTTP_POST),
                ],
                'single_logout_service': [
                    ('http://localhost:8000/saml2/ls/', saml2.BINDING_HTTP_REDIRECT),
                    ('http://localhost:8000/saml2/ls/post', saml2.BINDING_HTTP_POST),
                ],
            },
            'required_attributes': ['uid'],
            'optional_attributes': ['eduPersonAffiliation'],
            'idp': {
                'example-idp': {
                    'entityid': 'https://example-idp.com/saml2/metadata',
                    'single_sign_on_service': {
                        saml2.BINDING_HTTP_REDIRECT: 'https://example-idp.com/saml2/sso',
                    },
                    'single_logout_service': {
                        saml2.BINDING_HTTP_REDIRECT: 'https://example-idp.com/saml2/slo',
                    },
                },
            },
        },
    },
    'metadata': {
        'local': [os.path.join(BASE_DIR, 'saml2/metadata.xml')],
    },
    'debug': True,
    'key_file': os.path.join(BASE_DIR, 'saml2/private-key.pem'),
    'cert_file': os.path.join(BASE_DIR, 'saml2/public-cert.pem'),
    'encryption_keypairs': [{
        'key_file': os.path.join(BASE_DIR, 'saml2/private-key.pem'),
        'cert_file': os.path.join(BASE_DIR, 'saml2/public-cert.pem'),
    }],
    'contact_person': [
        {
            'given_name': 'Tech Support',
            'sur_name': '',
            'company': 'Example Inc.',
            'email_address': 'support@example.com',
            'contact_type': 'technical',
        },
    ],
    'organization': {
        'name': [('Example Inc.', 'en')],
        'display_name': [('Example', 'en')],
        'url': [('http://example.com', 'en')],
    },
}